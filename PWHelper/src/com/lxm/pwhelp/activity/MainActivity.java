/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.lxm.pwhelp.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.EditText;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.lxm.pwhelp.R;
import com.lxm.pwhelp.adapter.LazyAdapter;
import com.lxm.pwhelp.adapter.PinnedHeaderExpandableAdapter;
import com.lxm.pwhelp.bean.PWGroup;
import com.lxm.pwhelp.bean.PWItem;
import com.lxm.pwhelp.custom.EmailDialog;
import com.lxm.pwhelp.dao.PWGroupDao;
import com.lxm.pwhelp.dao.PWItemDao;
import com.lxm.pwhelp.view.NoScrollViewPager;
import com.lxm.pwhelp.view.PinnedHeaderExpandableListView;

public class MainActivity extends Activity implements View.OnClickListener {
	public static final String KEY_ARTIST = "artist";
	public static final String KEY_DURATION = "duration";
	public static final String KEY_THUMB_URL = "thumb_url";
	public static final String KEY_TITLE = "title";
	private LazyAdapter adapter;
	private TextView label1;
	private TextView label2;
	private TextView label3;
	private TextView label4;
	private ListView lv_list;
	private ImageButton mAddressImg;
	private ImageButton mFrdImg;
	
	private PagerAdapter mPagerAdapter;
	private PinnedHeaderExpandableAdapter expandableAdapter;
	private PinnedHeaderExpandableListView explistview;
	private String[][] childrenData = new String[6][5];
	private String[] groupData = new String[6];
	
	private ImageButton mSettingImg;
	private LinearLayout mTabAddress;
	private LinearLayout mTabFrd;
	private LinearLayout mTabSetting;
	private LinearLayout mTabWeiXin;

	private LinearLayout additem;
	private LinearLayout backupitem;

	private NoScrollViewPager mViewPager;
	private List<View> mViews;
	private ImageButton mWeiXinImg;
	private ArrayList<HashMap<String, String>> songsList;
	private TextView title;
	
	private int expandFlag = -1;//control the list if expand
	
	private PWItemDao itemDao;
	private PWGroupDao groupDao;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(0x7f030000);
		initView();
		initViewPage();
		initEvent();
	}

	private void initEvent() {
		mTabWeiXin.setOnClickListener(this);
		mTabAddress.setOnClickListener(this);
		mTabFrd.setOnClickListener(this);
		mTabSetting.setOnClickListener(this);
		additem.setOnClickListener(this);
		backupitem.setOnClickListener(this);
		mViewPager.setOnPageChangeListener(new OnPageChangeListener() {
			/**
			 * ViewPage左右滑动
			 */
			public void onPageSelected(int arg0) {
				int currentItem = mViewPager.getCurrentItem();
				switch (currentItem) {
				case 0: {
					label1.setTextColor(Color.rgb(115, 215, 107));
					mWeiXinImg.setImageResource(R.drawable.home_noselected);
					title.setText("首页");
					return;
				}
				case 1: {
					label2.setTextColor(Color.rgb(115, 215, 107));
					mAddressImg.setImageResource(R.drawable.pass_selected);
					title.setText("密码详情");
					return;
				}
				case 2: {
					label3.setTextColor(Color.rgb(115, 215, 107));
					mFrdImg.setImageResource(R.drawable.manage_selected);
					title.setText("密码管理");
					return;
				}
				case 3: {
					label4.setTextColor(Color.rgb(115, 215, 107));
					mSettingImg.setImageResource(R.drawable.person_selected);
					title.setText("个人中心");
					break;
				}
				}
			}

			public void onPageScrolled(int arg0, float arg1, int arg2) {
			}

			public void onPageScrollStateChanged(int arg0) {
			}
		});
	}

	private void initView() {
		itemDao = new PWItemDao(this);
		groupDao = new PWGroupDao(this);
		mViews = new ArrayList<View>();
		mViewPager = (NoScrollViewPager) findViewById(R.id.id_viewpage);
		mTabWeiXin = (LinearLayout) findViewById(R.id.id_tab_weixin);
		mTabAddress = (LinearLayout) findViewById(R.id.id_tab_address);
		mTabFrd = (LinearLayout) findViewById(R.id.id_tab_frd);
		mTabSetting = (LinearLayout) findViewById(R.id.id_tab_settings);
		mWeiXinImg = (ImageButton) findViewById(R.id.id_tab_weixin_img);
		mAddressImg = (ImageButton) findViewById(R.id.id_tab_address_img);
		mFrdImg = (ImageButton) findViewById(R.id.id_tab_frd_img);
		mSettingImg = (ImageButton) findViewById(R.id.id_tab_settings_img);
		label1 = (TextView) findViewById(R.id.label1);
		label2 = (TextView) findViewById(R.id.label2);
		label3 = (TextView) findViewById(R.id.label3);
		label4 = (TextView) findViewById(R.id.label4);
		title = (TextView) findViewById(R.id.title);
	}

	private void initViewPage() {
		// 初妈化四个布局
		LayoutInflater mLayoutInflater = LayoutInflater.from(this);
		View tab01 = mLayoutInflater.inflate(R.layout.tab01, null);
		View tab02 = mLayoutInflater.inflate(R.layout.tab02, null);
		View tab03 = mLayoutInflater.inflate(R.layout.tab03, null);
		View tab04 = mLayoutInflater.inflate(R.layout.tab04, null);

		additem = (LinearLayout) tab03.findViewById(R.id.additem);
		explistview = (PinnedHeaderExpandableListView) tab02.findViewById(R.id.explistview);
		
		backupitem = (LinearLayout) tab04.findViewById(R.id.recovery);

		lv_list = (ListView) tab01.findViewById(R.id.list1);
		songsList = new ArrayList<HashMap<String, String>>();
		
		List<PWItem> items = itemDao.getPWItemAll();
		for(PWItem item:items){
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("title", item.getItem_type());
			map.put("artist", "账号："+item.getItem_username());
			map.put("duration", "密码："+item.getItem_password());
			songsList.add(map);
		}
		List<PWGroup> groups = groupDao.getGroupAll();
		if(groups.size()==0){
			PWGroup group1 = new PWGroup();
			group1.setGroup_name("默认分组");
			PWGroup group2 = new PWGroup();
			group2.setGroup_name("网银密码");
			PWGroup group3 = new PWGroup();
			group3.setGroup_name("论坛密码");
			PWGroup group4 = new PWGroup();
			group4.setGroup_name("微博密码");
			PWGroup group5 = new PWGroup();
			group5.setGroup_name("QQ密码");
			PWGroup group6 = new PWGroup();
			group6.setGroup_name("邮箱密码");
			groupDao.add(group1);
			groupDao.add(group2);
			groupDao.add(group3);
			groupDao.add(group4);
			groupDao.add(group5);
			groupDao.add(group6);
		}
		
		//expand list data
		groupData[0] = "默认分组";
		groupData[1] = "网银密码";
		groupData[2] = "论坛密码";
		groupData[3] = "微博密码";
		groupData[4] = "QQ密码";
		groupData[5] = "邮箱密码";
		
		for(int i=0;i<6;i++){
			for(int j=0;j<5;j++){
				childrenData[i][j] = "好友"+i+"-"+j;
			}
		}
		//设置悬浮头部VIEW
		explistview.setHeaderView(getLayoutInflater().inflate(R.layout.group_head,
				explistview, false));
		expandableAdapter = new PinnedHeaderExpandableAdapter(childrenData, groupData, getApplicationContext(),explistview);
		explistview.setAdapter(expandableAdapter);
		//设置单个分组展开
		explistview.setOnGroupClickListener(new GroupClickListener());

		adapter = new LazyAdapter(this, songsList);
		lv_list.setAdapter(adapter);

		mViews.add(tab01);
		mViews.add(tab02);
		mViews.add(tab03);
		mViews.add(tab04);

		// 适配器初始化并设置
		mPagerAdapter = new PagerAdapter() {

			@Override
			public void destroyItem(ViewGroup container, int position,
					Object object) {
				container.removeView(mViews.get(position));

			}

			@Override
			public Object instantiateItem(ViewGroup container, int position) {
				View view = mViews.get(position);
				container.addView(view);
				return view;
			}

			@Override
			public boolean isViewFromObject(View arg0, Object arg1) {

				return arg0 == arg1;
			}

			@Override
			public int getCount() {

				return mViews.size();
			}
		};

		mViewPager.setAdapter(mPagerAdapter);
	}

	public void onClick(View arg0) {
		switch (arg0.getId()) {
		case R.id.id_tab_weixin: {
			mViewPager.setCurrentItem(0);
			resetImg();
			label1.setTextColor(Color.rgb(115, 215, 107));
			mWeiXinImg.setImageResource(R.drawable.home_selected);
			title.setText("首页");
			return;
		}
		case R.id.id_tab_address: {
			mViewPager.setCurrentItem(1);
			resetImg();
			label2.setTextColor(Color.rgb(115, 215, 107));
			mAddressImg.setImageResource(R.drawable.pass_selected);
			title.setText("密码详情");
			return;
		}
		case R.id.id_tab_frd: {
			mViewPager.setCurrentItem(2);
			resetImg();
			label3.setTextColor(Color.rgb(115, 215, 107));
			mFrdImg.setImageResource(R.drawable.manage_selected);
			title.setText("密码管理");
			return;
		}
		case R.id.id_tab_settings: {
			mViewPager.setCurrentItem(3);
			resetImg();
			label4.setTextColor(Color.rgb(115, 215, 107));
			mSettingImg.setImageResource(R.drawable.person_selected);
			title.setText("个人中心");
			break;
		}
		case R.id.additem: {
			//DialogAddItem();
			Intent intent = new Intent(MainActivity.this,
					AddItemActivity.class);
			// 打开新的Activity
			startActivityForResult(intent,1);
			break;
		}
		case R.id.recovery: {
			dialogEmail();
			break;
		}
		}
	}

	private void resetImg() {
		label1.setTextColor(Color.rgb(0x88, 0x88, 0x88));
		label2.setTextColor(Color.rgb(0x88, 0x88, 0x88));
		label3.setTextColor(Color.rgb(0x88, 0x88, 0x88));
		label4.setTextColor(Color.rgb(0x88, 0x88, 0x88));
		mWeiXinImg.setImageResource(R.drawable.home_noselected);
		mAddressImg.setImageResource(R.drawable.pass_noselected);
		mFrdImg.setImageResource(R.drawable.manage_noselected);
		mSettingImg.setImageResource(R.drawable.person_noselected);
	}
	
	// 回调方法，从第二个页面回来的时候会执行这个方法
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if ((keyCode == KeyEvent.KEYCODE_BACK)
				&& (event.getAction() == KeyEvent.ACTION_DOWN)) {
			dialogExit();
		}
		return super.onKeyDown(keyCode, event);
	}
	
	// 弹窗
	private void dialogEmail() {
		EmailDialog dialog = new EmailDialog(MainActivity.this);
		EditText editText = (EditText) dialog.getEditText();
		dialog.setOnPositiveListener(new OnClickListener(){
			@Override
	        public void onClick(View v) {
	        }
		});
		dialog.setOnNegativeListener(new OnClickListener(){
			@Override
	        public void onClick(View v) {
	        }
		});
		dialog.show();
	}

	/**
	 * dialog for exit
	 */
	protected void dialogExit() {
		AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
		builder.setMessage("确认退出吗？");
		builder.setTitle("提示");
		builder.setPositiveButton("确认",
				new android.content.DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						finish();
						System.exit(0);
					}
				});

		builder.setNegativeButton("取消",
				new android.content.DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
		builder.create().show();
	}
	
	class GroupClickListener implements OnGroupClickListener{
		@Override
		public boolean onGroupClick(ExpandableListView parent, View v,
				int groupPosition, long id) {
			if (expandFlag == -1) {
				// 展开被选的group
				explistview.expandGroup(groupPosition);
				// 设置被选中的group置于顶端
				explistview.setSelectedGroup(groupPosition);
				expandFlag = groupPosition;
			} else if (expandFlag == groupPosition) {
				explistview.collapseGroup(expandFlag);
				expandFlag = -1;
			} else {
				explistview.collapseGroup(expandFlag);
				// 展开被选的group
				explistview.expandGroup(groupPosition);
				// 设置被选中的group置于顶端
				explistview.setSelectedGroup(groupPosition);
				expandFlag = groupPosition;
			}
			return true;
		}
	}
	
	@Override
	protected void onStart(){
		List<PWItem> items = itemDao.getPWItemAll();
		songsList.clear();
		for(PWItem item:items){
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("title", item.getItem_type());
			map.put("artist", "账号："+item.getItem_username());
			map.put("duration", "密码："+item.getItem_password());
			songsList.add(map);
		}
		super.onStart();
	}
	
	@Override
	protected void onDestroy(){
		super.onDestroy();
	}
}
