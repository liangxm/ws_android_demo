/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.lxm.pwhelp.activity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.graphics.Color;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager.OnPageChangeListener;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnGroupClickListener;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.baoyz.swipemenulistview.SwipeMenu;
import com.baoyz.swipemenulistview.SwipeMenuCreator;
import com.baoyz.swipemenulistview.SwipeMenuItem;
import com.baoyz.swipemenulistview.SwipeMenuListView;
import com.baoyz.swipemenulistview.SwipeMenuListView.OnMenuItemClickListener;
import com.baoyz.swipemenulistview.SwipeMenuListView.OnSwipeListener;
import com.lxm.pwhelp.R;
import com.lxm.pwhelp.adapter.LazyAdapter;
import com.lxm.pwhelp.adapter.PinnedHeaderExpandableAdapter;
import com.lxm.pwhelp.bean.PWGroup;
import com.lxm.pwhelp.bean.PWItem;
import com.lxm.pwhelp.custom.EmailDialog;
import com.lxm.pwhelp.dao.PWGroupDao;
import com.lxm.pwhelp.dao.PWItemDao;
import com.lxm.pwhelp.view.NoScrollViewPager;
import com.lxm.pwhelp.view.PinnedHeaderExpandableListView;

public class MainActivity extends Activity implements View.OnClickListener {

	private LazyAdapter adapter;
	private TextView label1;
	private TextView label2;
	private TextView label3;
	private TextView label4;
	
	private SwipeMenuListView lv_list;
	private List<ApplicationInfo> mAppList;
	
	private ImageButton mAddressImg;
	private ImageButton mFrdImg;

	private PagerAdapter mPagerAdapter;
	private PinnedHeaderExpandableAdapter expandableAdapter;
	private PinnedHeaderExpandableListView explistview;
	private String[][] childrenData = new String[6][5];
	private String[] groupData = new String[6];

	private ImageButton mSettingImg;
	private LinearLayout mTabAddress;
	private LinearLayout mTabFrd;
	private LinearLayout mTabSetting;
	private LinearLayout mTabWeiXin;

	private LinearLayout additem;
	private LinearLayout backupitem;
	private LinearLayout recovery;
	private LinearLayout settings;

	private NoScrollViewPager mViewPager;
	private List<View> mViews;
	private ImageButton mWeiXinImg;
	private ArrayList<HashMap<String, String>> songsList;
	private TextView title;

	private ImageView add_group;

	private int expandFlag = -1;// control the list if expand

	private PWItemDao itemDao;
	private PWGroupDao groupDao;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_main);
		
		mAppList = getPackageManager().getInstalledApplications(0);
		
		initView();
		initViewPage();
		initEvent();
	}

	private void initEvent() {
		mTabWeiXin.setOnClickListener(this);
		mTabAddress.setOnClickListener(this);
		mTabFrd.setOnClickListener(this);
		mTabSetting.setOnClickListener(this);
		additem.setOnClickListener(this);
		backupitem.setOnClickListener(this);
		recovery.setOnClickListener(this);
		settings.setOnClickListener(this);
		add_group.setOnClickListener(this);
		mViewPager.setOnPageChangeListener(new OnPageChangeListener() {
			/**
			 * ViewPage左右滑动
			 */
			public void onPageSelected(int arg0) {
				int currentItem = mViewPager.getCurrentItem();
				switch (currentItem) {
				case 0: {
					label1.setTextColor(Color.rgb(115, 215, 107));
					mWeiXinImg.setImageResource(R.drawable.home_noselected);
					title.setText("首页");
					return;
				}
				case 1: {
					label2.setTextColor(Color.rgb(115, 215, 107));
					mAddressImg.setImageResource(R.drawable.pass_selected);
					title.setText("密码分组");
					return;
				}
				case 2: {
					label3.setTextColor(Color.rgb(115, 215, 107));
					mFrdImg.setImageResource(R.drawable.manage_selected);
					title.setText("密码管理");
					return;
				}
				case 3: {
					label4.setTextColor(Color.rgb(115, 215, 107));
					mSettingImg.setImageResource(R.drawable.person_selected);
					title.setText("个人中心");
					break;
				}
				}
			}

			public void onPageScrolled(int arg0, float arg1, int arg2) {
			}

			public void onPageScrollStateChanged(int arg0) {
			}
		});
	}

	private void initView() {
		itemDao = new PWItemDao(this);
		groupDao = new PWGroupDao(this);
		mViews = new ArrayList<View>();
		mViewPager = (NoScrollViewPager) findViewById(R.id.id_viewpage);
		mTabWeiXin = (LinearLayout) findViewById(R.id.id_tab_weixin);
		mTabAddress = (LinearLayout) findViewById(R.id.id_tab_address);
		mTabFrd = (LinearLayout) findViewById(R.id.id_tab_frd);
		mTabSetting = (LinearLayout) findViewById(R.id.id_tab_settings);
		mWeiXinImg = (ImageButton) findViewById(R.id.id_tab_weixin_img);
		mAddressImg = (ImageButton) findViewById(R.id.id_tab_address_img);
		mFrdImg = (ImageButton) findViewById(R.id.id_tab_frd_img);
		mSettingImg = (ImageButton) findViewById(R.id.id_tab_settings_img);
		label1 = (TextView) findViewById(R.id.label1);
		label2 = (TextView) findViewById(R.id.label2);
		label3 = (TextView) findViewById(R.id.label3);
		label4 = (TextView) findViewById(R.id.label4);
		title = (TextView) findViewById(R.id.title);
		add_group = (ImageView) findViewById(R.id.add_group);
		add_group.setVisibility(View.GONE);
	}

	private void initViewPage() {
		// 初妈化四个布局
		LayoutInflater mLayoutInflater = LayoutInflater.from(this);
		View tab01 = mLayoutInflater.inflate(R.layout.tab01, null);
		View tab02 = mLayoutInflater.inflate(R.layout.tab02, null);
		View tab03 = mLayoutInflater.inflate(R.layout.tab03, null);
		View tab04 = mLayoutInflater.inflate(R.layout.tab04, null);

		additem = (LinearLayout) tab03.findViewById(R.id.additem);
		explistview = (PinnedHeaderExpandableListView) tab02
				.findViewById(R.id.explistview);

		backupitem = (LinearLayout) tab04.findViewById(R.id.cloud);
		recovery = (LinearLayout) tab04.findViewById(R.id.recovery);
		settings = (LinearLayout) tab04.findViewById(R.id.settings);
		add_group = (ImageView) findViewById(R.id.add_group);

		lv_list = (SwipeMenuListView) tab01.findViewById(R.id.list1);
		songsList = new ArrayList<HashMap<String, String>>();

		List<PWItem> items = itemDao.getPWItemAll();
		for (PWItem item : items) {
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("item_id", String.valueOf(item.getItem_id()));
			map.put("item_type", item.getItem_type());
			map.put("item_username", item.getItem_username());
			map.put("item_password", item.getItem_password());
			songsList.add(map);
		}
		List<PWGroup> groups = groupDao.getGroupAll();
		if (groups.size() == 0) {
			PWGroup group1 = new PWGroup();
			group1.setGroup_name("默认分组");
			PWGroup group2 = new PWGroup();
			group2.setGroup_name("网银密码");
			PWGroup group3 = new PWGroup();
			group3.setGroup_name("论坛密码");
			PWGroup group4 = new PWGroup();
			group4.setGroup_name("微博密码");
			PWGroup group5 = new PWGroup();
			group5.setGroup_name("QQ密码");
			PWGroup group6 = new PWGroup();
			group6.setGroup_name("邮箱密码");
			groupDao.add(group1);
			groupDao.add(group2);
			groupDao.add(group3);
			groupDao.add(group4);
			groupDao.add(group5);
			groupDao.add(group6);
		}

		// expand list data
		groupData[0] = this.getResources().getString(R.string.group_default);
		groupData[1] = this.getResources().getString(R.string.group_bank);
		groupData[2] = this.getResources().getString(R.string.group_bbs);

		groupData[3] = this.getResources().getString(R.string.group_weibo);
		groupData[4] = this.getResources().getString(R.string.group_qq);
		groupData[5] = this.getResources().getString(R.string.group_email);

		for (int i = 0; i < 6; i++) {
			for (int j = 0; j < 5; j++) {
				childrenData[i][j] = "好友" + i + "-" + j;
			}
		}
		// 设置悬浮头部VIEW
		explistview.setHeaderView(getLayoutInflater().inflate(
				R.layout.group_head, explistview, false));
		expandableAdapter = new PinnedHeaderExpandableAdapter(childrenData,
				groupData, getApplicationContext(), explistview);
		explistview.setAdapter(expandableAdapter);
		// 设置单个分组展开
		explistview.setOnGroupClickListener(new GroupClickListener());

		adapter = new LazyAdapter(this, songsList);
		lv_list.setAdapter(adapter);
		
		// step 1. create a MenuCreator
		SwipeMenuCreator creator = new SwipeMenuCreator(){
			@Override
			public void create(SwipeMenu menu) {
				// create "open" item
				SwipeMenuItem openItem = new SwipeMenuItem(
						getApplicationContext());
				// set item background
				openItem.setBackground(new ColorDrawable(Color.rgb(0xC9, 0xC9,
						0xCE)));
				// set item width
				openItem.setWidth(dp2px(90));
				// set item title
				openItem.setTitle("Open");
				// set item title fontsize
				openItem.setTitleSize(18);
				// set item title font color
				openItem.setTitleColor(Color.WHITE);
				// add to menu
				menu.addMenuItem(openItem);

				// create "delete" item
				SwipeMenuItem deleteItem = new SwipeMenuItem(
						getApplicationContext());
				// set item background
				deleteItem.setBackground(new ColorDrawable(Color.rgb(0xF9,
						0x3F, 0x25)));
				// set item width
				deleteItem.setWidth(dp2px(90));
				// set a icon
				deleteItem.setIcon(R.drawable.ic_delete);
				// add to menu
				menu.addMenuItem(deleteItem);
			}
		};
		
		//set creator
		lv_list.setMenuCreator(creator);
		
		
		// step 2. listener item click event
		lv_list.setOnMenuItemClickListener(new OnMenuItemClickListener() {
			@Override
			public void onMenuItemClick(int position, SwipeMenu menu, int index) {
				Toast.makeText(getApplicationContext(), position + " index:"+index, 0).show();
				HashMap<String, String> song = songsList.get(position);
				ApplicationInfo item = mAppList.get(position);
				switch (index) {
				case 0:
					// open
					//open(item);
					break;
				case 1:
					// delete
//					delete(item);
					//mAppList.remove(position);
					//mAdapter.notifyDataSetChanged();
					break;
				default:
					Intent intent = new Intent(MainActivity.this, DetailActivity.class);
					Bundle bundle = new Bundle();
					bundle.putString("item_type", song.get("item_type").toString());
					bundle.putString("item_username", song.get("item_username").toString());
					bundle.putString("item_password", song.get("item_password").toString());
					intent.putExtras(bundle);
					MainActivity.this.startActivityForResult(intent, 1);
					break;
				}
			}
		});
		// set SwipeListener
		lv_list.setOnSwipeListener(new OnSwipeListener(){

			@Override
			public void onSwipeStart(int position) {
				// swipe start
			}
			
			@Override
			public void onSwipeEnd(int position) {
				// swipe end
			}
			
		});
		
		// test item long click
		lv_list.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> parent, View view,
					int position, long id) {
				Toast.makeText(getApplicationContext(), position + " long click", 0).show();
				return false;
			}
		});
		
		
		mViews.add(tab01);
		mViews.add(tab02);
		mViews.add(tab03);
		mViews.add(tab04);

		// 适配器初始化并设置
		mPagerAdapter = new PagerAdapter() {
			@Override
			public void destroyItem(ViewGroup container, int position,
					Object object) {
				container.removeView(mViews.get(position));
			}

			@Override
			public Object instantiateItem(ViewGroup container, int position) {
				View view = mViews.get(position);
				container.addView(view);
				return view;
			}

			@Override
			public boolean isViewFromObject(View arg0, Object arg1) {

				return arg0 == arg1;
			}

			@Override
			public int getCount() {

				return mViews.size();
			}
		};

		mViewPager.setAdapter(mPagerAdapter);
	}

	public void onClick(View arg0) {
		switch (arg0.getId()) {
		case R.id.id_tab_weixin: {
			add_group.setVisibility(View.GONE);
			mViewPager.setCurrentItem(0);
			resetImg();
			label1.setTextColor(Color.rgb(115, 215, 107));
			mWeiXinImg.setImageResource(R.drawable.home_selected);
			title.setText("首页");
			return;
		}
		case R.id.id_tab_address: {
			add_group.setVisibility(View.VISIBLE);
			mViewPager.setCurrentItem(1);
			resetImg();
			label2.setTextColor(Color.rgb(115, 215, 107));
			mAddressImg.setImageResource(R.drawable.pass_selected);
			title.setText("密码分组");
			return;
		}
		case R.id.id_tab_frd: {
			add_group.setVisibility(View.GONE);
			mViewPager.setCurrentItem(2);
			resetImg();
			label3.setTextColor(Color.rgb(115, 215, 107));
			mFrdImg.setImageResource(R.drawable.manage_selected);
			title.setText("密码管理");
			break;
		}
		case R.id.id_tab_settings: {
			add_group.setVisibility(View.GONE);
			mViewPager.setCurrentItem(3);
			resetImg();
			label4.setTextColor(Color.rgb(115, 215, 107));
			mSettingImg.setImageResource(R.drawable.person_selected);
			title.setText("个人中心");
			break;
		}
		case R.id.additem: {
			// DialogAddItem();
			Intent intent = new Intent(MainActivity.this, AddItemActivity.class);
			// 打开新的Activity
			startActivityForResult(intent, 1);
			break;
		}
		case R.id.cloud: {
			dialogEmail();
			break;
		}
		case R.id.recovery: {
			showFileChooser();
			break;
		}
		case R.id.add_group: {
			break;
		}
		case R.id.settings: {
			Intent intent = new Intent(MainActivity.this, SettingsActivity.class);
			startActivityForResult(intent, 1);
			break;
		}
		}
	}

	private void resetImg() {
		label1.setTextColor(Color.rgb(88, 88, 88));
		label2.setTextColor(Color.rgb(88, 88, 88));
		label3.setTextColor(Color.rgb(88, 88, 88));
		label4.setTextColor(Color.rgb(88, 88, 88));
		mWeiXinImg.setImageResource(R.drawable.home_noselected);
		mAddressImg.setImageResource(R.drawable.pass_noselected);
		mFrdImg.setImageResource(R.drawable.manage_noselected);
		mSettingImg.setImageResource(R.drawable.person_noselected);
	}

	// 回调方法，从第二个页面回来的时候会执行这个方法
	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		if (resultCode == Activity.RESULT_OK) {
			// Get the Uri of the selected file
			/*
			 * Uri uri = data.getData(); String url; try { url =
			 * FileUtils.getPath(this, uri); Log.i("ht", "url" + url); String
			 * fileName = url.substring(url.lastIndexOf("/") + 1); Intent intent
			 * = new Intent(this, UploadServices.class);
			 * intent.putExtra("fileName", fileName); intent.putExtra("url",
			 * url); intent.putExtra("type ", ""); intent.putExtra("fuid", "");
			 * intent.putExtra("type", "");
			 * 
			 * startService(intent);
			 * 
			 * } catch (URISyntaxException e) { // TODO Auto-generated catch
			 * block e.printStackTrace(); }
			 */
		}
		super.onActivityResult(requestCode, resultCode, data);
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if ((keyCode == KeyEvent.KEYCODE_BACK)
				&& (event.getAction() == KeyEvent.ACTION_DOWN)) {
			dialogExit();
		}
		return super.onKeyDown(keyCode, event);
	}

	/** 调用文件选择软件来选择文件 **/
	private void showFileChooser() {
		Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
		intent.setType("*/*");
		intent.addCategory(Intent.CATEGORY_OPENABLE);
		try {
			startActivityForResult(Intent.createChooser(intent, "请选择一个要上传的文件"),
					0);
		} catch (android.content.ActivityNotFoundException ex) {
			// Potentially direct the user to the Market with a Dialog
			Toast.makeText(this, "请安装文件管理器", Toast.LENGTH_SHORT).show();
		}
	}

	// 弹窗
	private void dialogEmail() {
		final EmailDialog dialog = new EmailDialog(MainActivity.this);
		// final EditText editText = (EditText) dialog.getEditText();
		dialog.setOnPositiveListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// dosomething youself
				dialog.cancel();
			}
		});
		dialog.setOnNegativeListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// String email = editText.getText().toString();
			}
		});
		dialog.show();
	}

	/**
	 * dialog for exit
	 */
	protected void dialogExit() {
		AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
		builder.setMessage("确认退出吗？");
		builder.setTitle("提示");
		builder.setPositiveButton("确认",
				new android.content.DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						finish();
						System.exit(0);
					}
				});

		builder.setNegativeButton("取消",
				new android.content.DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
		builder.create().show();
	}

	class GroupClickListener implements OnGroupClickListener {
		@Override
		public boolean onGroupClick(ExpandableListView parent, View v,
				int groupPosition, long id) {
			if (expandFlag == -1) {
				// 展开被选的group
				explistview.expandGroup(groupPosition);
				// 设置被选中的group置于顶端
				explistview.setSelectedGroup(groupPosition);
				expandFlag = groupPosition;
			} else if (expandFlag == groupPosition) {
				explistview.collapseGroup(expandFlag);
				expandFlag = -1;
			} else {
				explistview.collapseGroup(expandFlag);
				// 展开被选的group
				explistview.expandGroup(groupPosition);
				// 设置被选中的group置于顶端
				explistview.setSelectedGroup(groupPosition);
				expandFlag = groupPosition;
			}
			return true;
		}
	}
	
	private int dp2px(int dp) {
		return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp,
				getResources().getDisplayMetrics());
	}

	@Override
	protected void onResume() {
		List<PWItem> items = itemDao.getPWItemAll();
		if (items.size() != songsList.size()) {
			songsList.clear();
			for (PWItem item : items) {
				HashMap<String, String> map = new HashMap<String, String>();
				map.put("item_type", item.getItem_type());
				map.put("item_username", item.getItem_username());
				map.put("item_password", item.getItem_password());
				songsList.add(map);
			}
		}
		super.onResume();
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
	}

}
